package fitnus.utility;

import fitnus.database.EntryDatabase;
import fitnus.database.FoodDatabase;
import fitnus.database.MealPlanDatabase;
import fitnus.tracker.Entry;
import fitnus.tracker.Food;

import java.io.InputStream;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Scanner;

public class Ui {
    //private final Scanner sc = new Scanner(System.in);

    public static final String DIVIDER = "------------------\n";
    public static final String INIT_GENDER = "[X] Please enter your gender (m/f):";
    public static final String INIT_AGE = "[X] Please enter your age in years:";
    public static final String INIT_HEIGHT = "[X] Please enter your height in cm:";
    public static final String INIT_WEIGHT = "[X] Please enter your weight in kg:";
    public static final String INIT_SUCCESS = "Generated your daily calorie needs accordingly.";
    public static final String USER_INPUT = "You: ";
    public static final String WELCOME_MESSAGE = DIVIDER
            + "Welcome to FitNUS Tracker!";

    public static void printWelcomeMessage() {
        println(WELCOME_MESSAGE);
    }

    public static void println(String message) {
        System.out.println(message);
    }

    public static void print(String message) {
        System.out.print(message);
    }

    public static void printPreloadDatabaseError() {
        System.out.println("Error encountered while preloading database :("
                + " some data may have been lost");
    }

    public static void printPreloadUserError() {
        System.out.println("Error encountered while preloading user data :(");
    }

    public String readInput(InputStream in, PrintStream out) {
        Scanner sc = new Scanner(in);
        String userInput = "";
        do {
            userInput = sc.nextLine().toLowerCase().trim();
            if (userInput.equals("")) {
                out.println("Input cannot be empty! Please try again");
            }
        } while (userInput.equals(""));
        assert !userInput.trim().equals("") : "input cannot be empty";
        return userInput;
    }

    public String[] readIndexesInput(InputStream in, PrintStream out) {
        Scanner sc = new Scanner(in);
        String userInput = "";
        do {
            userInput = sc.nextLine().toLowerCase().trim();
            if (userInput.equals("")) {
                out.println("Input cannot be empty! Please try again");
            }
        } while (userInput.equals(""));
        assert !userInput.trim().equals("") : "input cannot be empty";
        return userInput.split(" ");
    }

    public static void printMealPlanCreation(FoodDatabase fd) {
        System.out.println("We will now create a mealplan! To create a Meal plan, "
                + "enter the indexes of the foods below with spaces in between each index.");
        System.out.println("For example: 1 2 8 4");
        System.out.println("Indexes that are not present/invalid will be ignored. "
                + "Duplicates are allowed, but try to not eat so much food :)");
        System.out.println("Here is a list of all foods present in the database:");
        System.out.println(fd.listFoods());
    }

    public static void printAutoAddedFoodCategory(String mealType, boolean isAutoGenerated) {
        if (isAutoGenerated) {
            System.out.println("Food category not detected. Based on current timing, "
                    + "the following category has been added: " + mealType);
        } else if (!isAutoGenerated) {
            System.out.println("The following food category has been tagged: " + mealType);
        }
    }

    public static void printMatchingFoods(ArrayList<Food> matchingFoods) {
        if (matchingFoods.size() == 0) {
            return;
        }
        System.out.println("Here are the matching foods in your database:");
        for (int i = 1; i <= matchingFoods.size(); i++) {
            System.out.println(" " + i + "."
                    + matchingFoods.get(i - 1).toString());
        }
    }

    public static void printMatchingFoodsSilenced(ArrayList<Food> matchingFoods) {
        if (matchingFoods.size() == 0) {
            return;
        }
        System.out.println(" [X] Select your desired food from the list below:");
        for (int i = 1; i <= matchingFoods.size(); i++) {
            System.out.println(" " + i + "."
                    + matchingFoods.get(i - 1).toString());
        }
    }

    public static void printPromptUserFoodInput(String foodName) {
        System.out.println("Oops! \"" + foodName + "\" does not exist in the database!");
        Ui.print(Ui.DIVIDER);
    }

    public static void printOutOfRangeInputInteger(int num) {
        System.out.println("Input " + num + " was out of range. Ignoring Input");
    }

    public static void printInvalidInputInteger(String input) {
        System.out.println("Input " + input + " was not an integer. Ignoring input.");
    }

    public static void printAddCalorieToFood(String foodName) {
        System.out.println("Adding \"" + foodName + "\"...");
        System.out.println("[X] Enter calories of \"" + foodName + "\":");
        Ui.print(Ui.USER_INPUT);
    }

    public static void printMatchingEntries(ArrayList<Entry> matchingEntries) {
        if (matchingEntries.size() == 0) {
            return;
        }
        System.out.println("Here are the matching entries in your database:");
        for (int i = 1; i <= matchingEntries.size(); i++) {
            System.out.println(" " + i + "."
                    + matchingEntries.get(i - 1).toString());
        }
    }

    public static void printMatchingSuggestions(ArrayList<Food> matchingFoods) {
        if (matchingFoods.size() == 0) {
            return;
        }
        System.out.println("Here are some suggestions:");
        for (int i = 1; i <= matchingFoods.size(); i++) {
            System.out.println(" " + i + "."
                    + matchingFoods.get(i - 1).toString());
        }
    }

    public static void printCalorieGoal(int calorieGoal) {
        println("Your daily calorie goal is " + calorieGoal + "kcal.");
    }

    public static void printPreloadedData(FoodDatabase fd, EntryDatabase ed, MealPlanDatabase md, User user) {
        Ui.println("Food database:" + System.lineSeparator()
                + fd.listFoods());
        Ui.println("Entry database:" + System.lineSeparator()
                + ed.listEntries());
        Ui.println("User data:" + System.lineSeparator()
                + user.getUserDataDisplay());
    }
}
